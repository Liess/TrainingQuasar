import _ from 'lodash'

function wings (feathers) {
  feathers.serve = (srv) => {
    let srvc = feathers.service(srv)
    srvc.data = []

    srvc.getAllData = () => {
      return srvc.data
    }
    srvc.find({}).then(result => {
      srvc.data = result.data || result
    })
    srvc.on('created', message => srvc.data.push(message))

    srvc.on('removed', message => {
      // Listen for when a message is deleted from the server and remove it from the view
      let index = _.findIndex(srvc.data, { _id: message._id })
      srvc.data.splice(index, 1)
    })

    srvc.on('patched', message => {
      // update the view for all socket clients
      let index = _.findIndex(srvc.data, { _id: message._id })
      srvc.data[index] = Object.assign(srvc.data[index], message)
    })

    srvc.on('updated', message => {
      // update the view for all socket clients
      let index = _.findIndex(srvc.data, { _id: message._id })
      srvc.data[index] = message
    })

    srvc.observe = (prop, handler) => {
      srvc.watch(prop, (id, oldval, newval) => {
        handler(id, oldval, newval)
        return newval
      })
    }

    if (!Object.prototype.watch) {
      Object.defineProperty(
      srvc,
      'watch', {
        enumerable: false,
        configurable: true,
        writable: false,
        value: function (prop, handler) {
          var old = srvc[prop]
          var cur = old
          var getter = function () {
            return cur
          }
          var setter = function (val) {
            old = cur
            cur = handler.call(this, prop, old, val)
            return cur
          }
          // can't watch constants
          if (delete this[prop]) {
            Object.defineProperty(srvc, prop, {
              get: getter,
              set: setter,
              enumerable: true,
              configurable: true
            })
          }
        }
      }
      )
    }
    return srvc
  }
  return feathers
}

export default wings
